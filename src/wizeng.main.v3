// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and runs binary .wasm files.
var print_result = false;
def main(args: Array<string>) -> int {
	var engine = Engine.new();
	var programArgs: Array<string>;
	var path: string;
	// Parse option and extract module and module arguments
	for (i < args.length) {
		var a = args[i];
		if (a.length > 0 && a[0] == '-') {
			var ok = TraceOptions.parse(a)
				|| EngineOptions.parse(engine, a)
				|| WizengOptions.parse(engine, a)
				|| MonitorOptions.parse(a)
				|| MetricOptions.parse(a)
				|| WasiOptions.parse(a);

			if (!ok) return ErrorBuilder.new()
				.puts("wizeng: unrecognized option ")
				.putsq(a)
				.ln()
				.exit(1);
		} else {
			path = a;
			programArgs = Arrays.range(args, i, args.length);
			break;
		}
	}

	if (WizengOptions.pregenFile != null) {
		var err = Target.pregenIntoFile(WizengOptions.pregenFile);
		if (err != null) return err.exit(2);
		if (path == null) return 0; // all done
	}

	if (WizengOptions.help) {
		printHelp();
		return 0;
	}

	if (WizengOptions.version) {
		printVersion();
		return 0;
	}

	if (path == null) return ErrorBuilder.new()
		.puts("wizeng: no input files\n")
		.exit(3);

	if (!Strings.endsWith(path, ".wasm")) return ErrorBuilder.new()
		.puts(path)
		.puts(": unknown file format, expected .wasm\n")
		.exit(4);

	// Parse the binary module
	var monitors = MonitorOptions.getMonitors();
	if (monitors.length > 0) Execute.tiering.onMonitorsStart();
	var result = engine.loadWasmFile(path);
	var module: Module;
	match (result) {
		Ok(m) => {
			module = m;
			Trace.instrumentModule(m);
		}
		FileNotFound => return ErrorBuilder.new()
			.puts("wizeng: could not load file ")
			.puts(path)
			.ln()
			.exit(2);
		ParseError(code, path, section, error_index, error_pos, error_msg) => return ErrorBuilder.new()
			.render(code, path, section, error_index, error_pos, error_msg)
			.exit(3);
	}
	// Call monitors for parsed module
	for (i < monitors.length) monitors[i].onParse(module);
	var err = ErrorGen.new(path);
	if (monitors.length > 0) Execute.tiering.onMonitorsFinish(module, err);

	// Gather the list of import processors
	var imports = Array<Exportable>.new(module.imports.length);
	var i = Instantiator.new(engine.extensions, module, imports, err, ImportOptions.new(WizengOptions.lazyImports));
	var map = Strings.newMap<ImportProcessor>();

	for (j < module.imports.length) {
		var name = module.imports[j].imp.module_name;
		if (map[name] == null) {
			var p = ModuleRegistry.get(name);
			if (p == null) return ErrorBuilder.new()
				.puts(path)
				.put2(": import[%d] from unknown module \"%s\"\n", j, name)
				.exit(7);
			var trace = Trace.moduleFilter != null && Trace.moduleFilter.matchesStr(name, null);
			p.init(programArgs, trace, err);
			map[name] = p;
			i.processors.put(p);
		}
	}

	// Call monitors on reset
	for (i < monitors.length) monitors[i].onReset();

	// Add tracing to import calls as specified by filters, if any.
	if (Trace.moduleFilter != null) i.binder = ImportTracer.new(Trace.moduleFilter).wrap;

	// Run the instantiatior.
	var instance = i.run();
	if (!err.ok()) return ErrorBuilder.new()
		.render(err.error_code, path, err.section, err.error_index, err.error_pos, err.error_msg)
		.exit(6);

	// Call monitors on finish
	for (i < monitors.length) monitors[i].onInstantiate(instance);

	// Try to find the main entrypoint.
	var entry: (Function, Array<Value>);
	for (j < i.processors.length) {
		var p = i.processors[j];
		if (HostModule.?(p)) {
			entry = HostModule.!(p).getMain(instance);
			if (entry.0 != null) break;
		}
	}

	if (entry.0 == null) {
		entry = findDefaultMain(instance);
	}

	if (entry.0 == null) return ErrorBuilder.new()
		.puts(path)
		.puts(": no main export from module\n")
		.exit(7);

	// Execute the start function, if any.
	if (module.start_function >= 0) {
		var start = instance.functions[module.start_function];
		for (i < monitors.length) monitors[i].onStart(start);
		var r = Metrics.start_time_us.run(Execute.call, (start, Values.NONE));
		match (r) {
			Throw(thrown) => {
				// Start function trapped or exited, return
				printThrowable(thrown);
				MonitorRegistry.runReports();
				Metrics.report();
				return -1;
			}
			_ => ; // ignore return value and break
		}
	}

	// Execute the main entrypoint.
	for (i < monitors.length) monitors[i].onMain(entry.0, entry.1);
	var before_us = Metrics.main_time_us.ticks();
	var before_cycles = Metrics.main_time_cycles.ticks();
	var r = Execute.call(entry.0, entry.1);
	Metrics.main_time_cycles.updateDiff(before_cycles);
	Metrics.main_time_us.updateDiff(before_us);

	var exit_code = 0;
	match (r) {
		Value(vals) => {
			if (vals.length == 1) {
				match (vals[0]) {
					I32(val) => exit_code = int.view(val);
					I64(val) => exit_code = int.view(val);
					_ => ;
				}
			}
			if (print_result) {
				for (i < vals.length) {
					if (i > 0) Trace.OUT.sp();
					Trace.OUT.putv(vals[i]);
				}
				Trace.OUT.ln();
			}
		}
		Throw(thrown) => match (thrown) {
			x: Exit => {
				exit_code = int.view(x.code);
			}
			_ => {
				printThrowable(thrown);
				exit_code = -1;
			}
		}
		StackSwitch(info) => {
			// printThrowable(info.parent.trap(TrapReason.INVALID_SUSPEND));
			// UNREACHABLE as far as V3Interpreter is concerned.
			// TODO[ss]: check how to make this better
			exit_code = -1;
		}
	}
	// Call monitors on finish
	for (i < monitors.length) monitors[i].onFinish(instance, r);
	MonitorRegistry.runReports();
	Metrics.report();
	return exit_code;
}
def printThrowable(thrown: Throwable) {
	var e = Trace.OUT;
	var indent = 0;
	for (s = thrown.stacktrace; s != null; s = s.prev) {
		for (t in s.frames) {
			for (i < indent) e.puts("  ");
			t.0.render(e);
			if (t.1 >= 0) e.puts(" +").putd(t.1);
			e.ln();
			indent++;
		}
		if (s.host != null) {
			for (i < indent) e.puts("  ");
			e.puts("\t@ ");
			s.host.render(e);
			e.ln();
			indent++;
		}
	}
	for (i < indent) e.puts("  ");
	e.puts("!");
	thrown.render(e);
	e.ln();
}

def printHelp() {
	putWizeng(Trace.OUT).ln();
	Trace.OUT.puts("Usage: wizeng [options] <wasm files>\n\n");
	EngineOptions.printHelp();
	TraceOptions.printHelp();
	MonitorOptions.printHelp();
}

def printVersion() {
	putWizeng(Trace.OUT).ln();
	if (Version.buildData != null) Trace.OUT.puts("Build data: ").puts(Version.buildData).ln();
	Trace.OUT.flush();
}

def putWizeng(out: StringBuilder) -> StringBuilder {
	return out.puts("Wizard Engine ").puts(Version.version).putc('.').putd(Version.minorVersion);
}

// Wraps imported functions with tracing. Can apply a filter to be selective on which imports to trace.
class ImportTracer(var filter: DeclFilter) {
	def wrap(decl: Decl, ex: Exportable) -> Exportable {
		if (!Function.?(ex)) return ex;
		var func = Function.!(ex);
		var imp = decl.imp;
		if (!filter.matchesStr(imp.module_name, imp.field_name)) return ex;
		var name = Strings.format1("trace(%q)", func.render);
		func = HostFunction.new(name, func.sig, traceCall(imp, func, _));
		return func;
	}
	def traceCall(imp: ImportInfo, f: Function, args: Range<Value>) -> HostResult {
		var out = Trace.OUT;
		out.puts(imp.module_name);
		out.putc('.');
		out.puts(imp.field_name);
		Values.renderVals(out, args);
		out.ln();
		match (f) {
			wf: WasmFunction => {
				var result = Execute.call(wf, args);
				out.puts("  ==> ");
				result.render(out);
				out.ln();
				match (result) {
					Value(vals) => return HostResult.ValueN(vals);
					Throw(thrown) => return HostResult.Throw(thrown);
					StackSwitch(info) => {
						return HostResult.Value0;
						// TODO[ss]: handle this better
						// return HostResult.Throw(info.parent.trap(TrapReason.INVALID_SUSPEND));
					}
				}
			}
			hf: HostFunction => {
				if (Trace.interpreter) Execute.traceCallHostFunction(hf);
				var result = hf.invoke(args);
				out.puts("  ==> ");
				match (result) {
					Value0 => {
					}
					Value1(val) => {
						out.putv(val);
					}
					ValueN(vals) => {
						if (vals.length == 1) {
							out.putv(vals[0]);
						} else {
							Values.renderVals(out, vals);
						}
					}
					Throw(thrown) => thrown.render(out);
					TailCall(func, args) => out.puts("<tailcall>");
				}
				out.ln();
				return result;
			}
			_ => return HostResult.Throw(null); // TODO: should not happen
		}
	}
}

// Options specific to the "wizeng" executable.
component WizengOptions {
	var help = false;
	var version = false;
	var pregenFile: string; // file to patch interpreter code into
	var color = true; // TODO: default value could be auto-detected from the terminal
	var lazyImports  = false; //

	def parse(engine: Engine, arg: string) -> bool {
		if (Strings.startsWith(arg, "-pregen=")) {
			pregenFile = Arrays.range(arg, 8, arg.length);
			return true;
		}
		if (Strings.equal(arg, "-help") || Strings.equal("--help", arg)) {
			help = true;
			return true;
		}
		if (Strings.equal(arg, "-version")) {
			version = true;
			return true;
		}
		if (Strings.equal(arg, "-nocolor")) {
			Palettes.on = false;
			return true;
		}
		if (Strings.equal(arg, "--expose-wizeng")) { // TODO: legacy, remove
			ModuleRegistry.exposeOne("wizeng");
			return true;
		}
		if (Strings.startsWith(arg, "--expose=")) {
			var pattern = Arrays.range(arg, 9, arg.length);
			ModuleRegistry.expose(GlobMatcher.new(pattern));
			return true;
		}
		if (Strings.equal(arg, "--print-result")) {
			print_result = true;
			return true;
		}
		if (Strings.equal(arg, "--lazy-import")) {
			lazyImports = true;
			return true;
		}
		return false;
	}
}
def findDefaultMain(instance: Instance) -> (Function, Array<Value>) {
	var module = instance.module;
	var exports = module.exports;
	var found: Function;
	for (j < exports.length) {
		var mex = module.exports[j], iex = instance.exports[j];
		if (!Function.?(iex)) continue;
		found = Function.!(iex);
		if (Strings.equal("main", mex.0)) {
			return (found, Arrays.map(found.sig.params, Values.default));
		}
	}
	return (null, null);
}
