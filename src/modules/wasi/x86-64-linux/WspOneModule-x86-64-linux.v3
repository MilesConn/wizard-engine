// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def OUT = Trace.OUT;
def X = WspOneRegistration.register(X86_64Linux_WspOneModule.new());
// Linux system call numbers
def SYS_openat = 257;
def SYS_clock_get_time = 228;
def SYS_clock_get_res = 229;
def SYS_getrandom = 318;
def SYS_fdatasync = 75;
def SYS_fsync = 118;
def SYS_lseek = 8;
def SYS_sched_yield = 24;
def SYS_kill = 37;
def SYS_getpid = 39;
def SYS_readlink = 89;


// Linux lseek whence values
def WHENCE_SET = 0;
def WHENCE_CUR = 1;
def WHENCE_END = 2;

// openat flags
def O_CLOEXEC = 0x80000;
def O_PATH = 0x200000;
def O_DIRECTORY = 0x10000;

// IO buffers
def timespec = Array<long>.new(2);

// A special value, which tells the fd of the current working directory used in openat
def AT_FDCWD = -100;

layout Prestat {
	+0	tag: u8;
	// Skip 4 bytes for alignment
	+4  variant: prestat_dir;
	=8;
}

layout prestat_dir {
	+0 pr_name_len: u32;
	=4;
}

// Platform-specific implementation of "wasi_snapshot_preview1" module.
class X86_64Linux_WspOneModule extends WspOneModule {
	def init_p(err: ErrorGen) {
		def dirs = WasiOptions.getDirs();
		// execute openat syscall for every given directory
		for (ii < dirs.length) {
			var dir = dirs[ii];
			// call openat system call
			var fd = Linux.syscall(SYS_openat, 
				(AT_FDCWD,
				 Pointer.atContents(dir),
				 LinuxConst.O_RDONLY | O_CLOEXEC | O_PATH | O_DIRECTORY
				)).0;
			if (fd < 0) {
				err.abs(0).InvalidPreopenPath(dir);
			}
			var wasi_fd = fdmap.alloc();
			fdmap.set(wasi_fd, WasiFd.new(int.view(fd), wasi_filetype.DIRECTORY, true, dir));
		}
	}

	def random_get(args: Range<Value>) -> HostResult {
		var ptr = Values.v_u(args[0]), len = Values.v_u(args[1]);
		var range = memory.range_ol_32(ptr, len);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var t = Linux.syscall(SYS_getrandom, (Pointer.atContents(range.result), len, 0));
		if (t.0 < 0) return i(mapErrno(t.0));
		return HostResult.Value1(Values.I32_0);
	}
	def clock_res_get(args: Range<Value>) -> HostResult {
		var clock_id = mapClockId(Values.v_u(args[0]));
		if (clock_id < 0) return HostResult.Value1(Values.i_v(wasi_errno.INVAL.code));
		var ptr = Values.v_u(args[1]);
		var range = memory.range_ol_32(ptr, 8);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var t = Linux.syscall(SYS_clock_get_res, (clock_id, Pointer.atContents(timespec)));
		if (t.0 < 0) return i(mapErrno(t.0));
		DataWriters.write_range_i64(range.result, timespec[0] * 1000000000L + timespec[1]);
		return HostResult.Value1(Values.I32_0);
	}
	def clock_time_get(args: Range<Value>) -> HostResult {
		var clock_id = mapClockId(Values.v_u(args[0]));
		if (clock_id < 0) return HostResult.Value1(Values.i_v(wasi_errno.INVAL.code));
		var lag = Values.v_l(args[1]);
		var ptr = Values.v_u(args[2]);
		var range = memory.range_ol_32(ptr, 8);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var t = Linux.syscall(SYS_clock_get_time, (clock_id, Pointer.atContents(timespec)));
		if (t.0 < 0) return i(mapErrno(t.0));
		DataWriters.write_range_i64(range.result, timespec[0] * 1000000000L + timespec[1]);
		return HostResult.Value1(Values.I32_0);
	}
	def fd_prestat_get(args: Range<Value>) -> HostResult {
		var fd = Values.v_i(args[0]);
		if (fd < 0) return HostResult.Value1(Values.i_v(wasi_errno.BADF.code));

		var wasi_fd = fdmap.get(fd);
		if (wasi_fd == null) return HostResult.Value1(Values.i_v(wasi_errno.NOENT.code));

		var ptr = Values.v_u(args[1]);
        var range = memory.range_ol_32(ptr, 8);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));

		var prestat = Ref<Prestat>.of(range.result);
		prestat.variant.pr_name_len = u32.!(wasi_fd.path.length);

		return HostResult.Value1(Values.I32_0);
	}

	def mapClockId(clock_id: u32) -> int {
		if (clock_id > 3) return -1;
		return int.view(clock_id); // WASI clock ids map directly onto Linux clock IDs
	}
	def mapErrno(errno: i64) -> int {
		return int.!(errno);
	}

	def fd_datasync(args: Range<Value>) -> HostResult {
		var fd = Values.v_i(args[0]);
		var wasi_fd = fdmap.get(fd);
		if (wasi_fd == null) return HostResult.Value1(Values.i_v(wasi_errno.BADF.code));
		var t = Linux.syscall(SYS_fdatasync, (wasi_fd.sysfd));
		if (t.0 < 0) return i(mapErrno(t.0));
		return HostResult.Value1(Values.I32_0);
	}


	def fd_seek(args: Range<Value>) -> HostResult {
		// question: whence is a u32, but in preview1 it is defined as struct
		
		var fd = Values.v_i(args[0]);
		var offset = Values.v_l(args[1]);
		var whence = Values.v_u(args[2]);
		// allocate a range for the result
		var ptr = Values.v_u(args[3]);
		var range = memory.range_ol_32(ptr, 8);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var wasi_fd = fdmap.get(fd);
		if (wasi_fd == null) return HostResult.Value1(Values.i_v(wasi_errno.BADF.code));
		if (whence > 2) return HostResult.Value1(Values.i_v(wasi_errno.INVAL.code));
		var t = Linux.syscall(SYS_lseek, (wasi_fd.sysfd, offset, whence));
		if (t.0 < 0) return i(mapErrno(t.0));
		// write the result to the memory
		DataWriters.write_range_i64(range.result, t.0);
		return HostResult.Value1(Values.I32_0);
	}

	def fd_sync(args: Range<Value>) -> HostResult {
		var fd = Values.v_i(args[0]);
		var wasi_fd = fdmap.get(fd);
		if (wasi_fd == null) return HostResult.Value1(Values.i_v(wasi_errno.BADF.code));
		var t = Linux.syscall(SYS_fsync, (wasi_fd.sysfd));
		if (t.0 < 0) return i(mapErrno(t.0));
		return HostResult.Value1(Values.I32_0);
	}

	def fd_tell(args: Range<Value>) -> HostResult {
		var fd = Values.v_i(args[0]);
		var ptr = Values.v_u(args[1]);
		var range = memory.range_ol_32(ptr, 8);
		if (range.reason != TrapReason.NONE) return HostResult.Throw(Trap.new(range.reason, null, null));
		var wasi_fd = fdmap.get(fd);
		if (wasi_fd == null) return HostResult.Value1(Values.i_v(wasi_errno.BADF.code));
		var t = Linux.syscall(SYS_lseek, (wasi_fd.sysfd, 0, WHENCE_CUR));
		if (t.0 < 0) return i(mapErrno(t.0));
		DataWriters.write_range_i64(range.result, t.0);
		return HostResult.Value1(Values.I32_0);
	}

	def sched_yield(args: Range<Value>) -> HostResult {
		var t = Linux.syscall(SYS_sched_yield, ());
		if (t.0 < 0) return i(mapErrno(t.0));
		return HostResult.Value1(Values.I32_0);
	}

	
}
